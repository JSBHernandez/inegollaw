const fs = require('fs')
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// Funci√≥n para cargar casos desde CSV
async function loadFromCSV(filePath) {
  try {
    console.log(`üìÅ Leyendo archivo: ${filePath}`)
    
    if (!fs.existsSync(filePath)) {
      console.error(`‚ùå El archivo ${filePath} no existe`)
      return
    }

    const csvContent = fs.readFileSync(filePath, 'utf-8')
    const lines = csvContent.split('\n').filter(line => line.trim())
    
    if (lines.length <= 1) {
      console.error('‚ùå El archivo CSV debe tener al menos una fila de datos adem√°s del header')
      return
    }

    // Asumir que la primera l√≠nea es el header
    const headers = lines[0].split(',').map(h => h.trim())
    console.log('üìã Headers detectados:', headers)

    const cases = []
    
    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''))
      
      if (values.length >= 3) { // Al menos clientName, caseType, status
        const caseData = {
          clientName: values[0] || '',
          caseType: values[1] || '',
          status: values[2] || 'Active',
          notes: values[3] || '',
          totalContract: values[4] && values[4] !== '' ? parseFloat(values[4]) : null
        }

        if (caseData.clientName && caseData.caseType) {
          cases.push(caseData)
        }
      }
    }

    if (cases.length === 0) {
      console.error('‚ùå No se encontraron casos v√°lidos en el archivo')
      return
    }

    console.log(`üöÄ Cargando ${cases.length} casos desde CSV...`)
    
    const createdCases = await prisma.clientCase.createMany({
      data: cases,
      skipDuplicates: true
    })

    console.log(`‚úÖ Se crearon exitosamente ${createdCases.count} casos`)

    // Crear notas para casos que las tengan
    const allCases = await prisma.clientCase.findMany({
      orderBy: { createdAt: 'desc' },
      take: cases.length
    })

    let notesCreated = 0
    for (const clientCase of allCases) {
      if (clientCase.notes && clientCase.notes.trim()) {
        await prisma.caseNote.create({
          data: {
            content: clientCase.notes,
            clientCaseId: clientCase.id
          }
        })
        notesCreated++
      }
    }

    console.log(`‚úÖ Se crearon ${notesCreated} notas iniciales`)

  } catch (error) {
    console.error('‚ùå Error al procesar CSV:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Crear archivo CSV de ejemplo
function createSampleCSV() {
  const sampleCSV = `clientName,caseType,status,notes,totalContract
"Juan P√©rez Gonz√°lez","Derecho Civil","Active","Divorcio con acuerdo mutuo",3500.00
"Laura Mart√≠nez Silva","Derecho Penal","Active","Defensa por delito menor",5000.00
"Miguel Torres Ruiz","Derecho Laboral","Completed","Demanda laboral resuelta",2800.00
"Carmen L√≥pez D√≠az","Derecho Comercial","Other","Constituci√≥n de empresa",
"Fernando Garc√≠a Vega","Derecho de Familia","Active","Custodia de menores",4200.50`

  fs.writeFileSync('sample-cases.csv', sampleCSV)
  console.log('üìÑ Archivo sample-cases.csv creado con datos de ejemplo')
  console.log('üìù Formato esperado: clientName,caseType,status,notes,totalContract')
}

module.exports = {
  loadFromCSV,
  createSampleCSV
}

// Si se ejecuta directamente
if (require.main === module) {
  const args = process.argv.slice(2)
  
  if (args[0] === '--create-sample') {
    createSampleCSV()
  } else if (args[0] && args[0].endsWith('.csv')) {
    loadFromCSV(args[0])
  } else {
    console.log('üìñ Uso:')
    console.log('  node scripts/csv-loader.js --create-sample    # Crear archivo CSV de ejemplo')
    console.log('  node scripts/csv-loader.js archivo.csv        # Cargar desde archivo CSV')
  }
}
